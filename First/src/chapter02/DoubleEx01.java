/*실수 자료형
 * 컴퓨터 내부에서 실수를 표현한다고 했을 때, 0과 1 사이에 존재하는 무한개의 실수를 모두 표현하는 것은 어려움
 * 따라서 컴퓨터에서는 실수를 '부동 소수점 방식'으로 표현하는데, 가수 부분과 지수 부분을 나누어서 실수를 나타내는 방식임
 * ex) 0.1을 부동소수점으로 표현한다면 1.0 * 10^(-1) 이 되는데 여기서 1.0이 가수, 10은 밑수, -1은 지수라고 함
 * 
 * 컴퓨터는 숫자를 내부적으로 2^n 으로 표현하기 때문에 실수 표현 시에도 밑수를 2로 쓰고, 지수와 가수부분을 각각 비트에 표현함
 * ex) 0.2는 0.4 * 2^(-1)로 표현할 수 있음.
 * 여기에서 가수를 밑수보다 작은 한자리 가수로 표현하는 정규화 과정을 거치는데, 모든 실수는 밑수 2로 정규화를 할 때 1.x * 2^(n) 으로 표현할 수 있음
 * 
 * 부동 소수점 방식은 지수로 표현되는 값이 0을 나타낼 수 없어 연산 시 약간의 오차가 발생할 수 있음 
 * 
 *   float형과 double형
 *   실수 자료형에는, float형과 double형이 있음
 *   float형은 부호 1비트, 지수부 8비트, 가수부 23비트로 총 32비트(4바이트)를 사용
 *   double형은 부호 1비트, 지수부 11비트, 가수부 52비트로 총 64비트(8바이트)를 사용
 *   
 *   자바에서는 실수를 더 정밀하게 표현할 수 있는 double형을 기본으로 사용함
*/

// 실수 입출력 해보기
package chapter02;

public class DoubleEx01 {
	public static void main(String[] args) {
		double dnum = 3.14;
		float fnum = 3.14F; // 3.14F 의 F는 정수 long의 L 과 같은 식별자
		
		System.out.println(dnum);
		System.out.println(fnum);
		
		
		// 부동 소수점의 연산 오류
		double dnum2 = 1;
		
		for (int i = 0; i < 10000; i++) {
			dnum2 = dnum2 + 0.1;
		}
		
		System.out.println(dnum2); // 정상적으로 연산이 됐다면 1001이 출력되어야 하지만 실제로는 1001.000000000159 이 출력됨
	}

}

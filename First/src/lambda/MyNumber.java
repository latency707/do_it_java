/*
 ** 함수형 프로그래밍과 람다식
 * 자바는 객체를 기반으로 프로그램을 구현함
 * 어떤 기능이 필요하다면 클래스를 먼저 만들고 클래스 안에 기능을 구현한 메서드를 만든 후, 메서드를 호출하는 구조
 * 클래스가 없으면 메서드를 사용할 수 없는 구조
 * 
 * 반면 함수형 프로그래밍은 함수의 구현과 호출만으로 프로그램을 만들 수 있는 방식
 * 자바에서는 자바 8부터 람다식 이라고 하는 함수형 프로그래밍 방식을 지원함
 * 
 ** 람다식 구현
 * 람다식 구현은 함수 이름이 없는 익명함수를 만드는 개념
 * 람다식 문법
 * (매개변수) -> {실행문;}
 * 예시)
 * (int x, int y) -> {return x + y;}
 * 
 ** 람다식 문법
 * 람다식 문법에서는 매개변수 자료형 생략이 가능함
 * 매개변수가 1개인 경우, 괄호도 생략 가능
 * 중괄호 속의 구현부가 한문장인 경우 중괄호를 생략할 수 있음(단 return은 중괄호 생략 불가)
 * 중괄호 속 구현부가 return문 뿐이라면 중괄호와 return 모두 생략하고 식만 쓸 수 있음
 * 
 ** 람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 인터페이스에 람다식으로 구현할 메서드를 선언함
 * 	이를 함수형 인터페이스라고 함
 * 
 * 
 ** 함수형 프로그래밍은 순수 함수(pure function)를 구현하고 호출함으로써 외부 자료에 부수적인 영향(side effect)을 주지 않도록 구혆는 방식
 * 순수함수란 매개변수만을 사용하여 만드는 함수
 * 즉 함수 내부에서 함수 외부의 변수를 사용하지 않아 함수가 수행되더라도 외부에 영향을 주지 않음
 * 입력받은 자료 외의 외부 자료에 영향을 미치지 않기 때문에 여러 자료를 동시에 처리하는 병렬처리에 적합함
 * 안정성, 확장성, 자료 독립성이 있는 프로그램을 개발할 수 있는 장점이 있음
 * 
 * 객체지향 언어는 객체 기반 구현, 함수형 프로그래밍은 함수를 기반으로하고 자료를 입력받아 구현하는 방식
 * 
 ** 함수형 인터페이스
 * 람다식은 메서드명이 없고 메서드 실행에 필요한 매개변수와 매개변수를 활용한 실행코드를 구현하는 것
 * 자바에서는 참조변수 없이 메서드를 호출할 수 없기 때문에 람다식 구현을 위한 함수형 인터페이스를 만들어야 함
 * 함수형 인터페이스 구현 후 람다식으로 구현할 메서드를 선언하는 방식
 * 람다식은 하나의 메서드를 구현하여 인터페이스형 변수에 대입하므로 인터페이스가 2개 이상의 메서드를 가져서는 안됨
 * 람다는 이름이 없기 때문에 여러개의 메서드 중 어떤 메서드를 구현한 것인지 모호해지기 때문
 * 람다식 인터페이스에 실수로 다른 메서드를 추가하는 실수를 막기위해 @FunctionalInterface 애노테이션을 사용함
 * 사용 방법은 @Override와 같고, 이 애노테이션을 사용하면 메서드가 2개 이상 선언되면 오류 발생
 * 
 ** 익명객체를 생성하는 람다식
 * 람다식은 객체없이 인터페이스 구현만으로 메서드를 호출할 수 있음
 * 람다식으로 메서드를 구현해 호출하면 컴퓨터 내부에서는 익명클래스가 생성되어 이를 통해 익명 객체가 생성되어 객체 없이도 메서드 호출이 가능함
 * 람다식 내부에서 지역변수(예- i) 를 변경하면 지역내부클래스에서와 같은 원인으로 오류가 발생함. 외부메서드의 지역변수 = 상수
 *
*/


// 함수형 인터페이스 선언
package lambda;

public interface MyNumber {
	int getMax(int num1, int num2); // 추상 메서드 선언
	
//	int add(int num1, int num2);	// 추가한 메서드

}

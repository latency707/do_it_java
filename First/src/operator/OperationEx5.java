/*비트연산자
 * 비트 단위로 연산이 이뤄지는 연산자로, 암호화 작업처럼 임의의 숫자를 만들거나, 어떤 변수의 특정 비트를 꺼내보는(masking) 에 사용
 * 비트 논리 연산자: 비트단위로 &(AND), |(OR), ^(XOR), ~(반전) 연산이 이뤄짐
 * 비트 이동 연산자: 비트를 오른쪽이나 왼쪽으로 이동하는 연산자 << , >>, >>> 연산자로 비트를 이동할 수 있음
*/

// 비트 이동 연산자
package operator;

public class OperationEx5 {
	public static void main(String[] args) {
		int num = 0B00000101; // 5를 8비트 2진수로 표현
		
		System.out.println(num << 2); // 왼쪽으로 2비트 이동 0010100 (20)
		System.out.println(num >> 2); // 오른쪽으로 2비트 이동 00000001 (1) 
		System.out.println(num >>>2); // 오른쪽으로 2비트 이동 00000001 (1)
		
		System.out.println(num); // num에 값을 대입하지 않았으므로 비트 이동과 관계없이 기존 값 5를 그대로 출력
		
		num = num << 2; // 왼쪽으로 2비트 이동한 값을 변수에 대입
		System.out.println(num); // 이동 값 20 출력
	}

	/*
	 *** 연산자 우선순위 ***
	 * 단항 연산자가 가장 높고, 이항, 삼항 연산자 순
	 * 대입 연산자의 우선순위가 가장 낮음
	 * 산술, 관계, 논리, 대입연산자 순서로 우선순위를 가지며 ()의 우선순위가 가장 높음
	 * 
	 *  Q) 다음 연산자들을 우선순위가 높은 순으로 배치해보세요. &&, ++, +=, ==
	 *  A) ++, ==, &&, +=
	 */	
	

}
